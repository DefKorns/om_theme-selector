#!/bin/bash
# shellcheck disable=SC2154,SC2038,SC2143
#  Copyright (c) 2022 DefKorns (https://defkorns.github.io/LICENSE)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

music_hack_bind() {
  { [ -f "$1" ] && [ -f "$2" ] && [ -f "$3/bgm_boot.wav" ] && [ -f "$3/bgm_home.wav" ]; } || return 1

  if [ "$sftype" = "nes" ]; then
    [ -f "$1" ] && mount_bind "$1" "$3/bgm_boot.wav" || return 1
  else
    [ -f "$SILENT_WAV" ] && mount_bind "$SILENT_WAV" "$3/bgm_boot.wav" || return 1
  fi

  [ -f "$2" ] && mount_bind "$2" "$3/bgm_home.wav" || return 1
  return 0
}

music_hack_unbind() {
  AUDIO_FILES_ARR="bgm_boot bgm_home se_sys_bounce se_sys_cancel se_sys_click se_sys_click_game se_sys_cursor se_sys_lock se_sys_ng se_sys_push se_sys_smoke se_sys_unlock"

  for WAVE in $AUDIO_FILES_ARR; do
    umount "${ORIGINAL_THEME_AUDIO}/${WAVE}.wav"
  done
}

font_bind_fix() {
  [ "$1" == "backup" ] && FONT_TYPE="title s m l small medium large"
  [ "$1" == "restore" ] && FONT_TYPE="s m l small medium large"
  [ "$1" == "restore" ] && [ -f "$TITLE_FONT_BACKUP" ] && mv "$TITLE_FONT_BACKUP" "$TITLE_FONT"
  for FONT in $FONT_TYPE; do
    [ "$1" == "backup" ] && [ ! -f "$TITLE_FONT_BACKUP" ] && mv "${FONT_PATH}/${FONT}.fnt" "${FONT_PATH}/${FONT}.fnt.backup"
    [ "$1" == "backup" ] && cp "$FULL_THEME_PATH/fonts/${FONT}.fnt" "${FONT_PATH}/${FONT}.fnt"
    [ "$1" == "restore" ] && umount "${ORIGINAL_THEME}/resources/fonts/${UI1}/${FONT}.fnt"
    [ "$1" == "restore" ] && rm "${FONT_PATH}/${FONT}.fnt"
  done
}

themeSelector() {
  local FOLDER_ID
  local GAME_STORAGE
  local GET_THEME_NAME
  local IS_CHILD
  local PARENT_ID
  local PARENT_THEME_TITLE
  local PREVIOUS_THEME
  local THEME_MATCH
  local UI0="ui/$sftype-$sfregion"
  local UI1=""
  local SYSTEM_TYPE="$sftype"

  case "$sftype" in
  hvcj)
    UI0="ui/hvc"
    SYSTEM_TYPE="shonen"
    ;;
  nes)
    UI0="clover-ui"
    UI1="nes/"
    if [ "$sfregion" = "jpn" ]; then
      UI0="clover-ui"
      UI1="hvc"
      SYSTEM_TYPE="$UI1"
    fi
    ;;
  snes)
    [ "$sfregion" = "jpn" ] && UI0="ui/shvc"
    ;;
  esac
  local ORIGINAL_THEME="$mountpoint/usr/share/$UI0"
  local ORIGINAL_THEME_AUDIO="$ORIGINAL_THEME/resources/sounds/hvc"
  local THEMES_PATH="$mountpoint/media/$modname/themes/$SYSTEM_TYPE"
  [ ! -d "$THEMES_PATH" ] && THEMES_PATH="$rootfs/usr/share/themes/$SYSTEM_TYPE"
  STATE_PATH="$mountpoint$profilepath/$modname"
  FOLDER_ID="$(cat "$STATE_PATH/menu")"
  local ACTIVE_FOLDER="CLV-S-00${FOLDER_ID}"
  local LAST_THEME="$STATE_PATH/lastTheme"
  local ACTIVE_THEME="$STATE_PATH/activeTheme"
  [ -f "$LAST_THEME" ] && PREVIOUS_THEME=$(cat "$LAST_THEME")

  local SELECTED_THEME="CHANGEME"
  local DIY_THEME="$mountpoint/tmp/diy_theme"
  local FULL_THEME_PATH="$THEMES_PATH/$SELECTED_THEME"
  local FONT_PATH="$mountpoint/media/$modname/fonts"
  [ ! -d "$FONT_PATH" ] && FONT_PATH="$rootfs/usr/share/fonts"
  local TITLE_FONT="$FONT_PATH/title.fnt"
  local TITLE_FONT_BACKUP="${TITLE_FONT}.backup"

  SILENT_WAV="$rootfs/usr/share/themes/bgm_boot.wav"
  MUSIC_PATH="$mountpoint/media/$modname/music_menu"
  [ ! -d "$MUSIC_PATH" ] && MUSIC_PATH="$rootfs/usr/share/music_menu"
  WAV_FILE="$(find "$MUSIC_PATH" -maxdepth 1 -type f -name "*.[Ww][Aa][Vv]" -exec basename {} \; | sed "s|^\./||" | shuf | head -n1)"
  BGM_HOME="$MUSIC_PATH/$WAV_FILE"
  GAME_STORAGE="$(findGameStorage)"

  find "$GAME_STORAGE" -maxdepth 3 -type f -name "$ACTIVE_FOLDER.desktop" | sort -u | while IFS= read -r CONFIG_FILE; do
    cd "$GAME_STORAGE" || exit
    for i in $(find . -type d -name "$ACTIVE_FOLDER" | sed "s|^\./||"); do

      if [ "$(grep -L -e "Name=Back" -e "Name=Home" "$i/$(basename "$i").desktop")" ]; then
        PARENT_ID="$(dirname "$i")"
        local FULL_PARENT_ID="CLV-S-00${PARENT_ID}"
        break
      fi
    done
    find "." -maxdepth 3 -type f -name "$FULL_PARENT_ID.desktop" -exec grep -L -e "Name=Back" -e "Name=Home" {} \; >tmp
    while IFS= read -r w; do
      PARENT_THEME_TITLE="$(grep -F 'Name=' "$w" | sed -r 's/Name=//g;s/ /_/g' | awk '{print tolower($0)}')"
    done <tmp
    [ -f tmp ] && rm tmp
    # shellcheck disable=SC2038
    IS_CHILD="$(find "$THEMES_PATH" -maxdepth 1 -type d | xargs -n 1 basename | grep -w "$PARENT_THEME_TITLE")"
    GET_THEME_NAME="$(grep -F 'Name=' "$CONFIG_FILE" | sed -r '/[Bb]ack/d;s/Name=//g;s/ /_/g' | awk '{print tolower($0)}')"

    THEME_MATCH="$(find "$THEMES_PATH" -maxdepth 1 -type d | xargs -n 1 basename | grep -w "$GET_THEME_NAME")"
    if [ -f "$STATE_PATH/om_themerandomizer" ]; then
      SELECTED_THEME="$PREVIOUS_THEME"
      local n="0"
      while [ "$SELECTED_THEME" == "$PREVIOUS_THEME" ] && [ "$n" -lt 3 ]; do
        n=$((n + 1))
        SELECTED_THEME="$(find "$THEMES_PATH" -maxdepth 1 -type d | shuf | head -n1 | xargs -n 1 basename)"
      done
    fi

    [ "$FOLDER_ID" == "000" ] && [ -d "$THEMES_PATH/default" ] && SELECTED_THEME="default"
    if [ -f "$STATE_PATH/om_themeperfolder" ]; then
      [ -n "$THEME_MATCH" ] && SELECTED_THEME="$GET_THEME_NAME"
      [ -n "$IS_CHILD" ] && SELECTED_THEME="$PARENT_THEME_TITLE"
    fi

    FULL_THEME_PATH="$THEMES_PATH/$SELECTED_THEME"

    if find "$DIY_THEME" -type f | read -r; then
      FULL_THEME_PATH="$DIY_THEME"
    fi

    if [ "$SELECTED_THEME" != "$PREVIOUS_THEME" ] || [ ! -f "$LAST_THEME" ] || [ ! -f "$ACTIVE_THEME" ]; then
      echo "$SELECTED_THEME" >"$LAST_THEME"
      echo "$FULL_THEME_PATH" >"$ACTIVE_THEME"
    fi

    local TITLE_THEME_FONT="$FULL_THEME_PATH/fonts/title.fnt"

    if [ -d "$FULL_THEME_PATH/fonts" ]; then
      if [ "$(cksum "$TITLE_FONT" | awk '{ print $1; }')" != "$(cksum "$TITLE_THEME_FONT" | awk '{ print $1; }')" ]; then
        font_bind_fix "backup"
      fi
    else
      font_bind_fix "restore"
    fi

    music_hack_unbind

    cd "$THEMES_PATH/$PREVIOUS_THEME" && find ./* -type f ! -name "*.wav" ! -path "./xtras/*" ! -path "./fonts/*" | cut -c3- | while IFS= read -r UMOUNT_FILE; do
      umount "$ORIGINAL_THEME/$UMOUNT_FILE"
    done

    if [ -f "$STATE_PATH/om_audiorandomizer" ] && [ -n "$(ls -A "$MUSIC_PATH")" ]; then
      if [ "$FOLDER_ID" = "000" ]; then
        music_hack_bind "$BGM_HOME" "$BGM_HOME" "$ORIGINAL_THEME_AUDIO"
      else
        [ -f "$STATE_PATH/om_advmusichack" ] && [ -z "$(find "$FULL_THEME_PATH" -type f -name "*.wav")" ] && music_hack_bind "$BGM_HOME" "$BGM_HOME" "$ORIGINAL_THEME_AUDIO"
      fi
    fi

    cd "$FULL_THEME_PATH" && find . -type f ! -path "./xtras/*" ! -path "./fonts/*" | while IFS= read -r THEME_FILE; do
      mount_bind "$FULL_THEME_PATH/$THEME_FILE" "$ORIGINAL_THEME/$THEME_FILE"
    done

    cd - >/dev/ || exit
  done

}
